import type { HKT, HKT2 } from '../hkt.js';
import type { OpticError } from './errors.js';
export declare type Class = 'Equivalence' | 'Iso' | 'Lens' | 'Prism' | 'Traversal' | 'Getter' | 'AffineFold' | 'Fold' | 'Setter';
export declare type A = HKT;
export declare type T = HKT2;
export declare type S<F extends HKT> = F[1];
export declare type B<F extends HKT2> = F[2];
export declare type Removable = true | undefined;
export interface Optic<C extends Class, A extends HKT, T extends HKT2, R extends Removable = undefined> {
    readonly _tag: C;
    readonly _A: A;
    readonly _T: T;
    readonly _removable: R;
}
export declare type Try<P, U> = P extends OpticError ? P : U;
export declare type Try2<P1, P2, U> = P1 extends OpticError ? P1 : P2 extends OpticError ? P2 : U;
export declare type TryA<P extends A, U> = Try<S<P>, U>;
export declare type TryT<P extends T, U> = Try2<S<P>, B<P>, U>;
